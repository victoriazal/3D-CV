/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Bastien Genbrugge (https://sketchfab.com/bastienBGR)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ship-in-clouds-c475323dc7f24e26ba2009c08c8e1941
Title: Ship in Clouds
*/

import React, { useRef,useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame,useThree } from '@react-three/fiber'
import  shipInTheClouds from '../assets/3d/shipInClouds.glb' 
import {a} from '@react-spring/three'
import { is } from '@react-three/fiber/dist/declarations/src/core/utils'
interface IslandProps {
  isRotating: boolean;
  setIsRotating: (value: boolean) => void;
  setCurrentStage: (value: number) => void;
}

const Island = (props: IslandProps) => {
  const { setCurrentStage,setIsRotating,isRotating } = props;
  const { camera,gl,viewport } = useThree();
  const islandRef = useRef();
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
   const { nodes, materials } = useGLTF(shipInTheClouds) as { nodes: { [name: string]: THREE.Object3D }, materials: { [name: string]: THREE.Material } };
 
  const dampingFactor = 0.95;
  const handlePointerDown = (e) => {
  e.stopPropagation();
  e.preventDefault();
  setIsRotating(true);
  const clientX = e.touches ? e.touches[0].clientX : e.clientX;
  lastX.current = clientX;
  }
  const handlePointerUp = (e: React.PointerEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
    }
  const handlePointerMove = (e: React.PointerEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if(isRotating){
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta= (clientX - lastX.current) / viewport.width;
      islandRef.current.rotation.y += delta * Math.PI * 0.01;
      lastX.current = clientX;
      rotationSpeed.current = delta*0.01*Math.PI;
   
    }
  }
  const handleWheel = (e: WheelEvent) => {
    e.preventDefault();
    const zoomSpeed = 0.01; 
    camera.position.z += e.deltaY * zoomSpeed;
  }
useFrame(() => {
  if (islandRef.current) {
    camera.position.x = islandRef.current.position.x;
    camera.position.y = islandRef.current.position.y;
    // camera.position.z = islandRef.current.position.z;
  }
});
// useFrame(() => {
//   if(!isRotating){
//     islandRef.current.rotation.y += rotationSpeed.current;
//     rotationSpeed.current *= dampingFactor;
//     if(Math.abs(rotationSpeed.current)<0.001){
//       rotationSpeed.current = 0;
//     }
//   } else{
//     const rotation = islandRef.current.rotation.y;
//     /**
//      * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
//      * The goal is to ensure that the rotation value remains within a specific range to
//      * prevent potential issues with very large or negative rotation values.
//      *  Here's a step-by-step explanation of what this code does:
//      *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
//      *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
//      *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
//      *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
//      *     This is done to ensure that the value remains positive and within the range of
//      *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
//      *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
//      *     modulo operation to the value obtained in step 2. This step guarantees that the value
//      *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
//      *     circle in radians.
//      */
//     const normalizedRotation =
//       ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

//     // Set the current stage based on the island's orientation
//     switch (true) {
//       case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
//         setCurrentStage(4);
//         break;
//       case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
//         setCurrentStage(3);
//         break;
//       case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
//         setCurrentStage(2);
//         break;
//       case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
//         setCurrentStage(1);
//         break;
//       default:
//         setCurrentStage(null);
//     }
//   }
// },1);
  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown',handlePointerDown);
    canvas.addEventListener('wheel', handleWheel);
    return () => {
      canvas.removeEventListener('pointerdown',handlePointerDown);
      canvas.removeEventListener('wheel', handleWheel);

    }
  }, [gl,handlePointerDown,handlePointerUp,handlePointerMove]);
  return (



    <a.group {...props} ref={islandRef}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.003}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          {/* <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sky_Mat_0.geometry}
            material={materials.material}
            position={[51.637, 0, -817.579]}
            rotation={[0, -Math.PI / 2, 0]}
          /> */}
            
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Boot_Finaal_1_Boot_Finaal_0.geometry}
            material={materials.Boot_Finaal}
            position={[7.534, -7.801, -688.476]}
            rotation={[0, -0.6, 0]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cloud_Poly_Poly_0.geometry}
            material={materials.Poly}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cloud_1_Cloud_1_0.geometry}
            material={materials.Cloud_1}
            position={[-102.342, -152.023, -1209.99]}
            rotation={[1.917, 0.433, 0.911]}
            scale={1.5}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cloud_2_Cloud_2_0.geometry}
            material={materials.Cloud_2}
            position={[333.052, -63.933, -1541.733]}
            rotation={[-2.901, 0.214, -1.167]}
            scale={1.5}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cloud_3_Cloud_3_0.geometry}
            material={materials.Cloud_3}
            position={[339.375, -70.968, -1571.745]}
            rotation={[2.892, -1.308, 3.083]}
            scale={1.189}
          />
        </group>
      </group>
    </a.group>
  )
}

export default Island